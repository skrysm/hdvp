#
# Builds and tests the code in this repository.
#
# NOTE: We don't use CodeQL because it takes, at the time of writing, 3 minutes to run which is
#   3x the time of the "build-and-test" job. Since we already have the Microsoft Code Analysis
#   enabled, I don't expect CodeQL to offer any additional insight (especially when compared to
#   the  time it takes to execute).
#
name: Build & Test

on:
  workflow_call:
    outputs:
      run_tests_conclusion:
        value: ${{ jobs.build-and-test.outputs.run_tests_conclusion }}

# Permissions for GITHUB_TOKEN for this workflow.
# NOTES ON PERMiSSIONS: https://manski.net/articles/github/actions/cheat-sheet#security-considerations
# NOTES ON SECRETS: https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secrets#using-secrets-in-a-workflow
permissions:
  contents: read

env:
  DOTNET_VERSION: '9.0'

# NOTE: Jobs run in parallel by default (unless "needs" is defined).
jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest

    outputs:
      run_tests_conclusion: ${{ steps.run_tests.conclusion }}

    steps:
      ###########################################################################
      #
      # Setup Steps
      #
      ###########################################################################

      - name: Clone Git repository
        uses: actions/checkout@v5
        with:
          lfs: true
          submodules: true

      # NOTE: While GitHub-hosted runners come with .NET preinstalled, they ship with the latest LTS version -
      #   which may not be the version we need. So we explicitly setup .NET here
      - name: Install .NET build environment
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: '${{ env.DOTNET_VERSION }}'  # required parameter

      # This creates ${{ steps.short-sha.outputs.sha }} to be used below.
      - name: Determine Git short commit hash
        id: short-sha
        uses: benjlevesque/short-sha@599815c8ee942a9616c92bcfb4f947a3b670ab0b  # version 3.0


      ###########################################################################
      #
      # Build Steps
      #
      ###########################################################################

      # See: https://docs.microsoft.com/de-de/dotnet/core/tools/dotnet-build
      # NOTE: Without specifying a solution file, "dotnet build" searches for a .sln file in the current directory.
      - name: Build code
        run: dotnet build --configuration Release

      # See: https://docs.microsoft.com/de-de/dotnet/core/tools/dotnet-test
      # NOTES:
      # * Without specifying a solution file, "dotnet test" searches for a .sln file in the current directory.
      # * There seems to be no way to name the .trx file as '<project>.trx'. If no 'LogFileName' is specified,
      #   the .trx files will be named something like "_fv-az278-737_2021-08-15_03_50_33.trx".
      # * The Option 'TreatNoTestsAsError' is documented here: https://learn.microsoft.com/en-us/visualstudio/test/configure-unit-tests-by-using-a-dot-runsettings-file?view=vs-2022#runconfiguration-element
      - name: Run tests
        id: run_tests
        run: dotnet test --configuration Release --no-restore --no-build --logger "trx;LogFileName=${{ runner.os }}.trx" --nologo -- RunConfiguration.TreatNoTestsAsError=true
        env:
          # Tells tests that they're running in a (potentially slow) CI environment.
          RUNS_IN_CI: true

      - name: Upload NuGet packages (as .zip file)
        uses: actions/upload-artifact@v4
        with:
          name: 'nuget-packages'
          path: 'build-packages/*.nupkg'
          if-no-files-found: error


      ###########################################################################
      #
      # Archive Steps
      #
      ###########################################################################

      - name: Upload test results (as .zip file)
        uses: actions/upload-artifact@v4
        # Run this step even if "run_tests" has failed (but not if any other previous step has failed - which would
        # be "failure()" - because in this case the tests have not run and thus no .trx files have been generated).
        # See: https://docs.github.com/en/actions/learn-github-actions/expressions#failure
        if: success() || steps.run_tests.conclusion == 'failure'
        with:
          # NOTES:
          #   * To make the downloads of the test results easier to use (i.e. when downloading test results
          #     from different runs), we'll add the run number to the name.
          #   * The name is used by the test reported step in ci.yaml.
          name: 'test-results-#${{ github.run_number }}-${{ steps.short-sha.outputs.sha }}-${{ runner.os }}'
          path: '**/*.trx'
          if-no-files-found: error
