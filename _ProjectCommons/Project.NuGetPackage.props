<!--

  Default settings for all projects that produce NuGet packages.

  To use it, add the following line after the import of 'Project.Code.props':

    <Import Project="$(ProjectCommonsDirectory)Project.NuGetPackage.props" />

  Afterwards, it's recommended to create a "<ProjectName>.NuGet.props" file for each
  project and put all NuGet related information into this file.

-->
<!-- You can find the latest version of this file here: https://github.com/skrysmanski/base-dotnet -->
<Project>

  <!--
    Default NuGet properties

    Additional properties to specify on each project: <Description>, <Authors>, <PackageLicenseExpression>, <RepositoryUrl>

    See:
    * https://docs.microsoft.com/en-us/dotnet/core/tools/csproj#nuget-metadata-properties
    * https://docs.microsoft.com/en-us/nuget/reference/msbuild-targets#pack-target
    * https://docs.microsoft.com/en-us/nuget/reference/nuspec

    For valid license expressions, see: https://spdx.org/licenses/
  -->
  <PropertyGroup>
    <!-- Why would this ever by "false"? -->
    <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
  </PropertyGroup>

  <PropertyGroup>
    <!--
      Mark this project as "packable" so that NuGet packages can be produced.
    -->
    <IsPackable>true</IsPackable>

    <!--
      The output path for all produced NuGet packages.
    -->
    <PackageOutputPath>$([System.IO.Path]::Combine($(ProjectsRootDirectory), 'build-packages'))</PackageOutputPath>

    <!--
      Generate NuGet package on build.
    -->
    <GeneratePackageOnBuild Condition="'$(Configuration)' == 'Release'">true</GeneratePackageOnBuild>

    <!--
      Generate XML documentation (to be included in the NuGet package).
    -->
    <GenerateDocumentationFile Condition="'$(Configuration)' == 'Release'">true</GenerateDocumentationFile>
  </PropertyGroup>

  <!--
    Adds/Fills the NuGet package properties that must be calculated dynamically.

    See also: https://docs.microsoft.com/en-us/dotnet/core/tools/csproj#nuget-metadata-properties
  -->
  <Target Name="_AddDynamicNuGetPackageProperties" BeforeTargets="GenerateNuspec">
    <!--
      Adds a list of commonly used types (if any) to the description of the NuGet package.
      Commonly used types are defined via <ItemGroup> and <CommonlyUsedTypes Include="MY_TYPE_HERE" />

      IMPORTANT: We need to do this inside of a target (rather than a top level <PropertyGroup>)
      because ItemGroups are not evaluated during the top level evaluation. Instead properties
      that do an ItemGroup transformation are simply filled with the transform expression - rather
      than the final result. As such, they're never empty.
    -->
    <PropertyGroup>
      <CommonlyUsedTypesAsSeparateLines>@(CommonlyUsedTypes->'%(Identity)', '&#13;')</CommonlyUsedTypesAsSeparateLines>
      <PackageDescription Condition=" '$(CommonlyUsedTypesAsSeparateLines)' != '' ">$(Description)&#13;&#13;Commonly Used Types:&#13;$(CommonlyUsedTypesAsSeparateLines)</PackageDescription>
    </PropertyGroup>

    <!--
      Add "Project URL", if none has specified. This is helpful becuase only the "Project URL" (and not the "Repository URL")
      shows up in Visual Studio's "Manage NuGet Packages" view.
    -->
    <PropertyGroup>
      <PackageProjectUrl Condition=" '$(PackageProjectUrl)' == '' ">$(RepositoryUrl)</PackageProjectUrl>
    </PropertyGroup>

    <!--
      Add VCS (git, ...) related properties.
    -->
    <PropertyGroup>
      <RepositoryCommit>$(SourceRevisionId)</RepositoryCommit>
    </PropertyGroup>

    <Exec Command="git branch --show-current" ConsoleToMSBuild="true" StandardOutputImportance="low" Condition=" '$(RepositoryType)' == 'git' ">
      <Output TaskParameter="ConsoleOutput" PropertyName="RepositoryBranch" />
    </Exec>
  </Target>

  <!--
    Deletes old NuGet packages from the output folder. The folder becomes crowded relatively fast making it hard
    to find the correct version. Also, you usually don't need to keep the old .nupkg files.
  -->
  <Target Name="_DeleteOldPackages" AfterTargets="_AddDynamicNuGetPackageProperties">
    <ItemGroup>
      <FilesToDelete Include="$(PackageOutputPath)/$(PackageId).*.nupkg"/>
    </ItemGroup>
    <Delete Files="@(FilesToDelete)" />
  </Target>

</Project>
